AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create a Pipeline to build and deploy a website from Github.
Parameters:
  BranchName:
    Description: GitHub branch name for release builds
    Type: String
    Default: main

  GithubRepositoryName:
    Description: GitHub repository name. For example, my-website
    Type: String

  GithubOrganization:
    Type: String
    Description: The owner of the repository. For an organization, it is the name of the organization
    
  DockerHubUsername:
    Type: String
    Description: The username for your Docker Hub Account, stored in Secrets Manager. Used for image.
    
  DockerHubPassword:
    Type: String
    NoEcho: true
    Description: The password for your Docker Hub Account, stored securely in Secrets Manager.

  GitHubSecret:
    Type: String
    NoEcho: true
    Description: Secret needed for webhook access to pull changes.
    
  NotificationEmailDistribution:
    Type: String
    Description: Email distribution to notify when builds have failed or succeeded
    
  ProjectEnvironmentType:
    Type: String
    Description: The type for the project configuration
    AllowedValues:
      - ARM_CONTAINER
      - LINUX_CONTAINER
      - LINUX_GPU_CONTAINER
      - WINDOWS_CONTAINER
      - WINDOWS_SERVER_2019_CONTAINER
    Default: WINDOWS_CONTAINER
      
  ProjectEnvironmentComputeType:
    Type: String
    Description: The compute size type for the project
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Default: BUILD_GENERAL1_MEDIUM
      
  ProjectEnvironmentImageName:
    Type: String
    Description: The docker image name only for the project environment, will be used with your DockerHubUsername
    Default: "ue4-minimal:4.25.4"

Outputs:
   ClientDownloadBucket:
    Description: The name of the bucket new client applications will be deployed to.
    Value: !Ref ClientDownloadableBucket
    Export:
      Name: !Sub '${AWS::StackName}-Client'

Resources:
  ClientDownloadableBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: 'Retain'
    UpdateReplacePolicy: 'Retain'
  
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: 'Retain'
    UpdateReplacePolicy: 'Retain'

  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - !GetAtt CodePipelineArtifactStoreBucket.Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join
              - ''
              - - !GetAtt
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false

  BuildRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "IAM role should not allow * action on its permissions policy. We acknowledge that we want to allow all the actions for a given group."
    Properties:
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Principal:
                Service: codebuild.amazonaws.com
              Action: sts:AssumeRole
        Path: "/"
        Policies:
            - PolicyName: "Logs"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - 'logs:*'
                    Resource:
                      - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Build:*:*"
                      - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Build:*"
                      - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Build"
            - PolicyName: "ManageArtifacts"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "s3:*Object"
                      - "s3:*Objects"
                      - "s3:List*"
                      - "s3:Get*"
                      - "s3:AbortMultipartUpload"
                    Resource:
                      - !GetAtt CodePipelineArtifactStoreBucket.Arn
                      - !Join
                        - ''
                        - - !GetAtt CodePipelineArtifactStoreBucket.Arn
                          - '/*'
                      - !GetAtt ClientDownloadableBucket.Arn
                      - !Join
                        - ''
                        - - !GetAtt ClientDownloadableBucket.Arn
                          - '/*'
                          
  DockerSecretPassword:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Secret used for pulling the private ue4 image
      Name: !Sub ${AWS::StackName}/DockerPassword
      SecretString: !Sub '{"username":"${DockerHubUsername}","password":"${DockerHubPassword}"}'

  BuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-Build'
      Description: !Sub 'Build project for ${AWS::StackName}.'
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: !Ref ProjectEnvironmentType
        ComputeType: !Ref ProjectEnvironmentComputeType
        Image: !Sub "${DockerHubUsername}/${ProjectEnvironmentImageName}"
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          CredentialProvider: SECRETS_MANAGER
          Credential: 
      TimeoutInMinutes: 60
      BadgeEnabled: true

  PipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref AppPipeline
      TargetAction: GameSource
      Name: !Sub '${AWS::StackName}PipelineWebhook'
      TargetPipelineVersion: !GetAtt AppPipeline.Version
      RegisterWithThirdParty: true

  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${AWS::StackName}Pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GameSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GithubOrganization
                Repo: !Ref GithubRepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GitHubSecret
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ClientBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              OutputArtifacts:
                - Name: ClientBuildOutput
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployDownloadableClient
              InputArtifacts:
                - Name: ClientBuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: S3
              Configuration:
                BucketName: !Ref ClientDownloadableBucket
                Extract: false
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "IAM role should not allow * action on its permissions policy. It has code powers, but we should reconfigure this."
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*CodePipelineServiceRole*'
              - Effect: Allow
                Action:
                  - 'logs:*'
                  - 'codedeploy:*'
                  - 'codebuild:*'
                  - 'codepipeline:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt CodePipelineArtifactStoreBucket.Arn
                      - /*
                  - !GetAtt CodePipelineArtifactStoreBucket.Arn
                  - !Join
                    - ''
                    - - !GetAtt ClientDownloadableBucket.Arn
                      - /*
                  - !GetAtt ClientDownloadableBucket.Arn
                  
  PipelineFailedEventRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "CodePipeline Failed Event Rule"
      EventPattern: 
        source:
        - aws.codepipeline
        detail-type:
        - CodePipeline Pipeline Execution State Change
        detail:
          state:
          - FAILED
          pipeline:
          - !Ref AppPipeline
      State: "ENABLED"
      Targets: 
        - 
          Arn: !Ref FailedPipelineSNSTopic
          Id: "FailedPipelineNotificationTopic"
          InputTransformer:
            InputTemplate: '"The Pipeline <pipeline> has failed. Go to https://console.aws.amazon.com/codepipeline/home?region=<region>#/view/<pipeline>" '
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              region: "$.region"
  FailedPipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref NotificationEmailDistribution
        Protocol: email

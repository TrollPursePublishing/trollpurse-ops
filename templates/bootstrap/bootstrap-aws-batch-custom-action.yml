AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Custom AWS CodePipeline action that enables On-Demand EC2 ECS containers for deployment actions
Parameters:
  ExecutionRoleArn:
    Type: String
    Description: Arn for the entire lambda function execution pipeline
  StateMachineRoleArn:
    Type: String
    Description: Arn for the lambda function state machine execution
Outputs:
  StateMachineArn:
    Description: Arn for the state machine managing the custom action
    Value: !Ref BatchDeployStateMachine
Resources:
  BeginApiHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Initiates a job in the job queue
      CodeUri: ../../functions/batch-custom-action/begin-api
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role: !Ref ExecutionRoleArn
      MemorySize: 128
      Timeout: 15

  EndApiHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Puts results into CodePipeline dependent on batch job results
      CodeUri: ../../functions/batch-custom-action/end-api
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role: !Ref ExecutionRoleArn
      MemorySize: 128
      Timeout: 15
      
  StatusApiHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Tracks batch job status
      CodeUri: ../../functions/batch-custom-action/status-api
      Handler: lambda.lambda_handler
      Runtime: python3.7
      Role: !Ref ExecutionRoleArn
      MemorySize: 128
      Timeout: 15
      
  BeginApiHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${BeginApiHandler}"
      RetentionInDays: 7

  EndApiHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${EndApiHandler}"
      RetentionInDays: 7

  StatusApiHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${StatusApiHandler}"
      RetentionInDays: 7

  BatchDeployStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-Deploy-Flow"
      DefinitionString: !Sub |-
        {
          "Comment": "Runs an AWS Batch job and monitors the job until it completes.",
          "StartAt": "Batch Job Flow",
          "States": {
            "Batch Job Flow: {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Begin Job",
                  "States": {
                    "Begin Job": {
                      "Type": "Task",
                      "Resource": "${BeginApiHandler.Arn}",
                      "InputPath": "$.params",
                      "ResultPath": "$.activeJob",
                      "Next": "Wait"
                    },
                    "Wait": {
                      "Type": "Wait",
                      "Seconds": 30,
                      "Next": "Stats Job"
                    },
                    "Stats Job": {
                      "Type": "Task",
                      "Resource": "${StatusApiHandler.Arn}",
                      "InputPath": "$.activeJob",
                      "ResultPath": "$.activeJob.jobState",
                      "Next": "Deploy Started?"
                    },
                    "Deploy Started?": {
                      "Type": "Choice",
                      "Choices":
                        {
                          "Variable": "$.activeJob.jobState",
                          "StringEquals": "SUCCEEDED",
                          "Next": "Success"
                        },
                        {
                          "Variable": "$.activeJob.jobState",
                          "StringEquals": "FAILED",
                          "Next": "Failed"
                        }
                      ],
                      "Default": "Wait"
                    },
                    "Success": {
                      "Type": "Pass",
                      "End": true
                    },
                    "Failed": {
                      "Type": "Fail",
                      "Error": "DeployError",
                      "Cause": "AWS Batch Job failed to succeed."
                    }
                  }
                }
              ],
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "ResultPath": "$.errorDetails",
                  "Next": "End Job"
                }
              ],
              "OutputPath": "$[0]",
              "Next": "End Job"
            },
            "End Job": {
              "Type": "Task",
              "Resource": "${EndApiHandler.Arn}",
              "InputPath": "$.activeJob",
              "End": true
            }
          }
        }
      RoleArn: !Ref StateMachineRoleArn

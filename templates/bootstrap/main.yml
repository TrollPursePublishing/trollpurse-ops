AWSTemplateFormatVersion: 2010-09-09
Description: One time run project that builds the requested features to support game engine CI and CD pipelines.
Parameters:
  BuildConfiguration:
    Type: String
    AllowedValues:
      - MassiveContainerBuilder
      - UnrealEngine4Support
    Description: What support systems should be bootstrapped? UnrealEngine4Support implies MassiveContainerBuilder and DockerRepositoryOnly. MassiveContainerBuilder implies DockerRepositoryOnly.
    ConstraintDescription: Only one of DockerRepositoryOnly, MassiveContainerBuilder, and UnrealEngine4Support.
  GithubPrivateAccessToken:
    Type: String
    Description: Needed to access repositories in CodePipeline, despite them being public.
    NoEcho: true
  LfsGithubUsername:
    Type: String
    Description: Needed to access GitLFS, okay to leave blank if you do not plan on using the custom serverless GitLfs service
    Default: "N/A"
  LfsGithubPrivateAccessToken:
    Type: String
    Description: Needed to access GitLFS, okay to leave blank if you do not plan on using the custom serverless GitLfs service
    NoEcho: true
    Default: "N/A"
  UE4GithubUsername:
    Type: String
    Description: Only needed if UnrealEngine4Support is selected. The username that has access to EpicGames/UnrealEngine or forked repo on GitHub.
    Default: "N/A"
  UE4GithubPrivateAccessToken:
    Type: String
    Description: Only needed if UnrealEngine4Support is selected. The private access token needed to build the ue4 source container
    Default: "N/A"
    NoEcho: true
  CustomActionProviderName:
    Type: String
    Description: Name of the custom action provider.
    Default: WindowsLargeDockerBuilder
  CustomActionProviderVersion:
    Type: Number
    Description: Version of the custom action provider.
    Default: 1
  ItchIoDeploySupport:
    Type: String
    Description: Create resources needed to auto deploy to itch using butler and a CodePipeline custom action
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
    ConstraintDescription: "Yes or No"
  BatchDeploySubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets the jobs will be launched in, must have access to ECS.
  BatchDeploySecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Security Groups for the launched batch services for deploy workers.
Conditions:
  BuildUE4Stuff:
    !Equals [ !Ref BuildConfiguration, UnrealEngine4Support ]
  BuildWindowsContainerStuff:
    !Or [!Equals [ !Ref BuildConfiguration, MassiveContainerBuilder ], Condition: BuildUE4Stuff ]
  BuildItchIoStuff:
    !Equals [ !Ref ItchIoDeploySupport, "Yes" ]
  BuildCustomDeploy:
    !Equals [ !Ref ItchIoDeploySupport, "Yes" ] #Make OR on Conditions as more deployment worker options become available
Outputs:
  Ue4FullDockerRepositoryUri:
    Condition: BuildUE4Stuff
    Value: !GetAtt ContainerRepository.Outputs.RepositoryURI
    Description: Continuous Integration server build of Unreal Engine 4.
    Export:
      Name: !Sub "${AWS::StackName}-Ue4FullRepoUri"
  ItchIoButlerDockerRepositoryUri:
    Condition: BuildItchIoStuff
    Value: !GetAtt ItchIoButlerContainerRepository.Outputs.RepositoryURI
    Description: Continuous Deploy server build of itch.io butler cli
    Export:
      Name: !Sub "${AWS::StackName}-ItchIoButlerRepoUri"
  GitLfsLambdaFunctionBucketName:
    Value: !GetAtt ArtifactStores.Outputs.ClientDownloadBucketName
    Description: Bucket Name of the Git Lfs function
    Export:
      Name: !Sub "${AWS::StackName}-GitLfsFunctionBucket"
  GitLfsLambdaFunctionObjectName:
    Value: !GetAtt GitLfsFunction.Outputs.GitLfsFunctionObjectName
    Description: Bucket Object name of the Git Lfs function
    Export:
      Name: !Sub "${AWS::StackName}-GitLfsFunctionObject"
Resources:
  ArtifactStores:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../common/ops-storage.yml
  
  GitLfsFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: bootstrap-estranged-lfs.yml
      Parameters:
        BuildArtifactBucketName: !GetAtt ArtifactStores.Outputs.ArtifactStoreBucketName
        PackageArtifactBucketName: !GetAtt ArtifactStores.Outputs.ClientDownloadBucketName
        CodePipelineRoleArn: !GetAtt PipelineRoles.Outputs.CodePipelineServiceRoleArn
        CodeBuildRoleArn: !GetAtt PipelineRoles.Outputs.CodeBuildRoleArn
        GithubAccessToken: !Ref GithubPrivateAccessToken
   
  # When we use GIT LFS with a custom domain, codebuild gets confused and thinks this is now GITHUB_ENTERPRISE instead of Git.
  CodeBuildSourceCredential:
    Type: 'AWS::CodeBuild::SourceCredential'
    Properties:
      Token: !Ref LfsGithubPrivateAccessToken #TODO: Use secrets manager
      ServerType: GITHUB_ENTERPRISE
      AuthType: PERSONAL_ACCESS_TOKEN
      Username: !Ref LfsGithubUsername
  
  ContainerRepository:
    Type: AWS::CloudFormation::Stack
    Condition: BuildUE4Stuff
    Properties:
      TemplateURL: ../common/ops-ecr.yml
      Parameters:
        RepositoryName: ue4-full
  
  ItchIoButlerContainerRepository:
    Type: AWS::CloudFormation::Stack
    Condition: BuildItchIoStuff
    Properties:
      TemplateURL: ../common/ops-ecr.yml
      Parameters:
        RepositoryName: itchio-butler
  
  PipelineRoles:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../common/ops-iam.yml
      Parameters:
        ArtifactStoreBucketArn: !GetAtt ArtifactStores.Outputs.ArtifactStoreBucketArn
        ClientDownloadBucketArn: !GetAtt ArtifactStores.Outputs.ClientDownloadBucketArn
  
  MassiveContainerBuilder:
    Type: AWS::CloudFormation::Stack
    Condition: BuildWindowsContainerStuff
    Properties:
      TemplateURL: bootstrap-fat-container-build.yml
      Parameters:
        TemplateArtifactBucketName: !GetAtt ArtifactStores.Outputs.ArtifactStoreBucketName
        PackageArtifactBucketName: !GetAtt ArtifactStores.Outputs.ClientDownloadBucketName
        PackageArtifactBucketArn: !GetAtt ArtifactStores.Outputs.ClientDownloadBucketArn
        CodePipelineRoleArn: !GetAtt PipelineRoles.Outputs.CodePipelineServiceRoleArn
        CodeBuildRoleArn: !GetAtt PipelineRoles.Outputs.CodeBuildRoleArn
        GithubAccessToken: !Ref GithubPrivateAccessToken
        BuilderCustomerActionName: !Ref CustomActionProviderName
  
  UE4ContainerPipeline:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - MassiveContainerBuilder
    Condition: BuildUE4Stuff
    Properties:
      TemplateURL: ue4/bootstrap-ue4-container-build.yml
      Parameters:
        CodePipelineRoleArn: !GetAtt PipelineRoles.Outputs.CodePipelineServiceRoleArn
        CustomActionProviderName: !Ref CustomActionProviderName
        CustomActionProviderVersion: !Ref CustomActionProviderVersion
        DockerImageRepository: !GetAtt ContainerRepository.Outputs.RepositoryURI
        ArtifactBucketName: !GetAtt ArtifactStores.Outputs.ArtifactStoreBucketName
        UE4GithubUsername: !Ref UE4GithubUsername
        UE4GithubPrivateAccessToken: !Ref UE4GithubPrivateAccessToken
        GithubAccessToken: !Ref GithubPrivateAccessToken
        
  CustomActionRoles:
    Type: AWS::CloudFormation::Stack
    Condition: BuildCustomDeploy
    Properties:
      TemplateURL: bootstrap-aws-batch-custom-action-iam.yml
  
  CustomActionBatchRoles:
    Type: AWS::CloudFormation::Stack
    Condition: BuildCustomDeploy
    Properties:
      TemplateURL: bootstrap-aws-batch-iam.yml
      Parameters:
        ArtifactStoreArn: !GetAtt ArtifactStores.Outputs.ArtifactStoreBucketArn
  
  CustomActionBatchCompute:
    Type: AWS::CloudFormation::Stack
    Condition: BuildCustomDeploy
    Properties:
      TemplateURL: bootstrap-aws-batch-compute.yml
      Parameters:
        ComputeServiceRoleArn: !GetAtt CustomActionBatchRoles.Outputs.BatchServiceRoleArn
        EcsInstanceRoleArn: !GetAtt CustomActionBatchRoles.Outputs.Ec2InstanceEcsRoleArn
        Subnets: !Join
          - ','
          - !Ref BatchDeploySubnets
        SecurityGroupIds: !Join 
          - ','
          - !Ref BatchDeploySecurityGroups
  
  CustomActionBatchStateMachine:
    Type: AWS::CloudFormation::Stack
    Condition: BuildCustomDeploy
    Properties:
      TemplateURL: ../../package/bootstrap-aws-batch-custom-action.yml
      Parameters:
        ExecutionRoleArn: !GetAtt CustomActionRoles.Outputs.ExecutionRoleArn
        StateMachineRoleArn: !GetAtt CustomActionRoles.Outputs.StateMachineRoleArn
  
  ItchIoButlerBuildProject:
    Type: AWS::CloudFormation::Stack
    Condition: BuildItchIoStuff
    Properties:
      TemplateURL: bootstrap-docker-project.yml
      Parameters:
        CodeBuildContainerRoleArn: !GetAtt PipelineRoles.Outputs.CodeBuildContainerArn
        OpsDockerRepositoryUri: !GetAtt ItchIoButlerContainerRepository.Outputs.RepositoryURI
        OpsDockerfileProject: itchio-butler
        OpsDockerfileProjectVersion: "1.0"
  
  ItchIoBatchDeployJob:
    Type: AWS::CloudFormation::Stack
    Condition: BuildItchIoStuff
    Properties:
      TemplateURL: ../../package/bootstrap-aws-batch-job-itch.yml
      Parameters:
        Image: !Sub "${ItchIoButlerContainerRepository.Outputs.RepositoryURI}:1.0.1"
        EcsTaskRoleArn: !GetAtt CustomActionBatchRoles.Outputs.EcsTaskRoleArn
        JobRoleArn: !GetAtt CustomActionBatchRoles.Outputs.JobRoleArn
        ExecutionRoleArn: !GetAtt CustomActionRoles.Outputs.ExecutionRoleArn
        BatchDeployStateMachineArn: !GetAtt CustomActionBatchStateMachine.Outputs.StateMachineArn
